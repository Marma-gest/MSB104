---
title: "assignment_1"
format: html
editor: visual
bibliography: [MSB104.bib]
author: Marius Martinussen, Espen Knutsen
---

```{r}
#| label: setup
#| output: false
#| message: false
#| echo: false
library(eurostat)
library(dineq)
library(readr)
library(tidyverse)
library(stringr)


```

## Part A: Sub-national GDP and GDP per capita

### 1. Data acquisition

By using Eurostat, we have downloaded data containing GDP and population for each country in the EU from year 1990 to 2023.
However, we are only interested in the following countries from 2000 to 2020:

### Countries of interest

-   Italy
-   Sweden
-   Belgium
-   Austria
-   Croatia
-   Serbia
-   Bosnia and Herzegovina
-   Bulgaria

Below is a short extract of the raw datasets from Eurostat.

```{r}
#| echo: FALSE
#| output: FALSE
# Loading datasets
# Country code list: "IT", "SE", "BE", "AT", "HR", "RS", "BA", "BG")
nama_10r_3gdp_linear_csv <- read_csv("nama_10r_3gdp_linear.csv.gz", 
    na = "NA")
demo_r_pjanaggr3_linear_csv <- read_csv("demo_r_pjanaggr3_linear.csv.gz", 
    na = "NA")
```

```{r}
#| echo: FALSE
nama_10r_3gdp_linear_csv |> 
    print(
    n = 5,
    width = 80
  )

demo_r_pjanaggr3_linear_csv |> 
  print(
    n = 5,
    width = 80
  )

```

\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--

## Description

In order to substract the countries in focus, we have used the metadata provided by Eurostat to filter out the data and variables of interest, using their respective country codes.
The variables we are interested in are the following:

-   geo = Tells us which country and sub-region we are looking at
-   time_period = Observed years
-   obs_value = The value of the observation
-   Unit = Currency

By filtering out irrelevant data and variables and rearranging the dataset to provide a clearer view, results with the following datasets:

```{r}
#| echo: FALSE
# Subset of countries from 2000 to 2020
# Filtering geo = 5 to only get NUTS3 level data
gdp_filtered <- nama_10r_3gdp_linear_csv |> 
  filter(
    nchar(geo) == 5, 
    unit == "MIO_EUR", 
      TIME_PERIOD %in% c(2000:2020),
    str_sub(geo, start = 1L, end = 2L) %in% c("IT", "SE", "BE", "AT", "HR", "RS", "BA", "BG")
    ) |> 
  select(
    year = TIME_PERIOD, 
    geo, GDP = OBS_VALUE
    ) 

```

```{r}
#| echo: FALSE
# Filtering population demo for nuts3 countries and years
# Filtering sex = T to only get the total of both genders
pop <- demo_r_pjanaggr3_linear_csv |> 
    filter(
      nchar(geo) == 5,
      sex == "T",
      age == "TOTAL",
      TIME_PERIOD %in% c(2000:2020), 
    str_sub(geo, start = 1L, end = 2L) %in% c("IT", "SE", "BE", "AT", "HR", "RS", "BA", "BG")
    ) |> 
  select(
    year = TIME_PERIOD, 
    geo, Population = OBS_VALUE
    ) 

```

```{r}
#| echo: FALSE
gdp_filtered |> 
  print(
    n = 5,
    width = 80
  )
pop |> 
  print(
    n = 5,
    width = 80
  )

```

```{r}
#| echo: FALSE
# Merging the two datasets
merged_data <- merge(gdp_filtered, pop, by = "geo") |> 
  select(
    -year.y,
    Year = year.x,)
```

```{r}
#| echo: FALSE
merged_data <- merge(gdp_filtered, pop, by = c("geo","year"), all = TRUE) |> 
filter(!is.na(Population),
         Population != 0,
         GDP != 0, 
         GDP != "NA"
)


```

### 2. GDP per capita calculation

In order to visualize the GDP per capita, we have merged the two datasets together and added a new variable that executes this formula in order to generate the GDP per capita for every country.

$$
y_i = \frac{\textit{GDP}_i}{\textit{population}_i}$$

It is worth noting that the GDP data from Eurostat is represented in million euros,, meaning that 1 in this case, equals 1 million euros.
0.1 represent 100 000 euros, and so on.
This will be consistent through all our visualized data.

```{r}
#| echo: FALSE
# Adding GDP variable by deviding gdp on population
merged_data <- merged_data |> 
  mutate(
    GDP_pc_n3 = GDP / Population
  )
```

### 3. Describe analysis

```{r}
#| echo: FALSE
# Adding GDP variable by deviding gdp on population
merged_data <- merged_data |> 
  mutate(GDP_pc_n3 = (GDP / Population)*1000000)
```

Austria

```{r}
#| echo: FALSE
AT <- merged_data |> filter(str_detect(geo, "AT"))
  
```

```{r}
#| echo: FALSE
AT |> ggplot(mapping = aes(
  x = year, 
  y = GDP_pc_n3, 
  colour = geo
)) + 
  geom_line()
```

```{r}
summary(merged_data)
```

Belgium

```{r}
#| echo: FALSE
BE <- merged_data |> filter(str_detect(geo, "BE"))
```

```{r}
#| echo: FALSE
BE |> ggplot(mapping = aes(
  x = year, 
  y = GDP_pc_n3, 
  colour = geo
)) + 
  geom_line()
```

Bulgaria

```{r}
#| echo: FALSE
BG <- merged_data |> filter(str_detect(geo, "BG"))
```

```{r}
#| echo: FALSE
BG |> ggplot(mapping = aes(
  x = year, 
  y = GDP_pc_n3, 
  colour = geo
)) + 
  geom_line()
```

Italy

North Italy

```{r}
#| echo: FALSE
IT_NORTH <- merged_data |> filter(str_detect(geo, "ITC|ITH"))
```

```{r}
#| echo: FALSE
IT_NORTH |> ggplot(mapping = aes(
  x = year, 
  y = GDP_pc_n3, 
  colour = geo
)) + 
  geom_line()
```

South Italy

```{r}
#| echo: FALSE
IT_SOUTH <- merged_data |> filter(str_detect(geo, "ITF|ITI|ITG"))
```

```{r}
#| echo: FALSE
IT_SOUTH |> ggplot(mapping = aes(
  x = year, 
  y = GDP_pc_n3, 
  colour = geo
)) + 
  geom_line()
```

Sweden

```{r}
#| echo: FALSE
SE <- merged_data |> filter(str_detect(geo, "SE"))
```

```{r}
#| echo: FALSE
SE |> ggplot(mapping = aes(
  x = year, 
  y = GDP_pc_n3, 
  colour = geo
)) + 
  geom_line()
```

Croatia - became a member in 2012

```{r}
#| echo: FALSE
HR <- merged_data |> filter(str_detect(geo, "HR"))
```

```{r}
#| echo: FALSE
HR |> ggplot(mapping = aes(
  x = year, 
  y = GDP_pc_n3, 
  colour = geo
)) + 
  geom_line()
```

Serbia (EU candidate countries)

```{r}
#| echo: FALSE
RS <- merged_data |> filter(str_detect(geo, "RS"))
```

```{r}
#| echo: FALSE
RS |> ggplot(mapping = aes(
  x = year, 
  y = GDP_pc_n3, 
  colour = geo
)) + 
  geom_line()
```

Bosnia and Herzegovia (EU candidate Countries)

```{r}
#| echo: FALSE
BA <- merged_data |> filter(str_detect(geo, "BA"))
```

```{r}
#| echo: FALSE
BA |> ggplot(mapping = aes(
  x = year, 
  y = GDP_pc_n3, 
  colour = geo
)) + 
  geom_line()
```

```{r}

```

## Part B: Regional inequity

### 1. Literature review

### 2. Gini coefficient calculation

```{r}
#| echo: FALSE
# Calculating GINI in nuts3 data for nuts2 regions to measure inequity on a nuts2 scale
merged_data <- merged_data |> 
 mutate(
    nuts2 = substr(geo, 1,4),
    nuts0 = substr(geo, 1,2)
 )
```

```{r}
#| echo: FALSE
#Grouping NUTS3 to NUTS2
# group_by(id:nuts2, year) %>%
# mutate(id:nuts3) = substr(id_nuts3, 1,4)
# select(id:nuts3, gdp:nuts3, year)
# #
merged_data <- merged_data |> 
  filter(!is.na(Population),
         Population != 0,
         GDP_pc_n3 != 0, 
         GDP_pc_n3 != "NA"
  ) |> 
group_by(nuts2, year) |> 
  mutate(gini_n2 = gini.wtd(GDP_pc_n3, Population)) |> 
  ungroup() |> 
  select(nuts0, nuts2, geo, year, GDP, Population, GDP_pc_n3, gini_n2)


```

### Data Presentation.

Austria

```{r}
#| echo: FALSE
AT_nuts2 <- merged_data |> filter(str_detect(nuts2, "AT"))
```

```{r}
#| echo: FALSE
AT_nuts2 |> ggplot(mapping = aes(
  x = year, 
  y = gini_n2, 
  colour = geo
)) + 
  geom_line()
```

```{r}

#| echo: FALSE
AT_nuts2 |> ggplot(mapping = aes(
  x = year, 
  y = gini_n2, 
  colour = geo
)) + 
  geom_point()
# Variation over time 
# Focus on one year
# scatterplot, x axis nuts 2 and y axid population
# x axis nuts region 1, 2, 3

p <- ggplot(data = merged_data, aes(
  x = year,
  y = GDP,
  group_by = nuts0,
  colour = geo
)) + 
  geom_point()
p + theme(legend.position = "none")
# Variation over time 
# Focus on one year
# scatterplot, x axis nuts 2 and y axid population
# x axis nuts region 1, 2, 3

p2 <- ggplot(data = merged_data, aes(
  x = nuts0,
  y = Population,
  colour = geo,
)) +
  geom_point() 
p2 + theme(legend.position = "none")


```

```{r}
p3 <- ggplot(data = merged_data, aes(
  x = nuts0,
  y = GDP,
  colour = geo
)) +
  geom_point()
p3 + theme(legend.position = "none")
```

```{r}
ggplot(data = merged_data, aes(
  
))
```

```{r}
ggplot(data = merged_data, aes(x = year, y = GDP_pc_n3, color = geo)) +
  geom_point() +  # You can change the type of plot according to your data and preferences
  facet_wrap(~ nuts0) +
  labs(x = "Year", y = "GDP", title = "Facet Grid Plot by Country") +
 theme(legend.position = "none"
 )
```
