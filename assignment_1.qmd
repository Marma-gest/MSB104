---
title: "assignment_1"
format: html
editor: visual
bibliography: [MSB104.bib]
author: Marius Martinussen, Espen Knutsen
---

```{r}
#| label: setup
#| output: false
#| message: false
#| echo: false
library(eurostat)
library(dineq)
library(readr)
library(tidyverse)
library(stringr)
library(huxtable)


```

## Part A: Sub-national GDP and GDP per capita

### 1. Data acquisition

By using Eurostat, we have downloaded data containing GDP and population for each country in the EU from year 1990 to 2023.
However, we are only interested in the following countries from 2000 to 2020:

### Countries of interest

-   Italy
-   Sweden
-   Belgium
-   Austria
-   Croatia
-   Serbia
-   Bosnia and Herzegovina
-   Bulgaria

Below is a short extract of the raw datasets from Eurostat.

```{r}
#| echo: FALSE
#| output: FALSE
# Loading datasets
# Country code list: "IT", "SE", "BE", "AT", "HR", "RS", "BA", "BG")
nama_10r_3gdp_linear_csv <- read_csv("nama_10r_3gdp_linear.csv.gz", 
    na = "NA")
demo_r_pjanaggr3_linear_csv <- read_csv("demo_r_pjanaggr3_linear.csv.gz", 
    na = "NA")
```

```{r}
#| echo: FALSE
nama_10r_3gdp_linear_csv |> 
    print(
    n = 5,
    width = 80
  )

demo_r_pjanaggr3_linear_csv |> 
  print(
    n = 5,
    width = 80
  )

```

\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--

## Description

In order to substract the countries in focus, we have used the metadata provided by Eurostat to filter out the data and variables of interest, using their respective country codes.
The variables we are interested in are the following:

-   geo = Tells us which country and sub-region we are looking at
-   time_period = Observed years
-   obs_value = The value of the observation
-   Unit = Currency

By filtering out irrelevant data and variables and rearranging the dataset to provide a clearer view, results with the following datasets:

```{r}
#| echo: FALSE
# Subset of countries from 2000 to 2020
# Filtering geo = 5 to only get NUTS3 level data
gdp_filtered <- nama_10r_3gdp_linear_csv |> 
  filter(
    nchar(geo) == 5, 
    unit == "MIO_EUR", 
      TIME_PERIOD %in% c(2000:2020),
    str_sub(geo, start = 1L, end = 2L) %in% c("IT", "SE", "BE", "AT", "HR", "RS", "BA", "BG")
    ) |> 
  select(
    year = TIME_PERIOD, 
    geo, GDP = OBS_VALUE
    ) 

```

```{r}
#| echo: FALSE
# Filtering population demo for nuts3 countries and years
# Filtering sex = T to only get the total of both genders
pop <- demo_r_pjanaggr3_linear_csv |> 
    filter(
      nchar(geo) == 5,
      sex == "T",
      age == "TOTAL",
      TIME_PERIOD %in% c(2000:2020), 
    str_sub(geo, start = 1L, end = 2L) %in% c("IT", "SE", "BE", "AT", "HR", "RS", "BA", "BG")
    ) |> 
  select(
    year = TIME_PERIOD, 
    geo, Population = OBS_VALUE
    ) 

```

```{r}
#| echo: FALSE
gdp_filtered |> 
  print(
    n = 5,
    width = 80
  )
pop |> 
  print(
    n = 5,
    width = 80
  )

```

```{r}
#| echo: FALSE
# Merging the two datasets
merged_data <- merge(gdp_filtered, pop, by = "geo") |> 
  select(
    -year.y,
    Year = year.x,)
```

```{r}
#| echo: FALSE
# merging the two datasets from eurostat and removing NA and zero values
merged_data <- merge(gdp_filtered, pop, by = c("geo","year"), all = TRUE) |> 
filter(!is.na(Population),
         Population != 0,
         GDP != 0, 
         GDP != "NA"
)


```

### 2. GDP per capita calculation

In order to visualize the GDP per capita, we have merged the two datasets together and added a new variable that executes this formula in order to generate the GDP per capita for every country.

$$
y_i = \frac{\textit{GDP}_i}{\textit{population}_i}$$

It is worth noting that the GDP data from Eurostat is represented in million euros,, meaning that 1 in this case, equals 1 million euros.
0.1 represent 100 000 euros, and so on.
This will be consistent through all our visualized data.

```{r}
#| echo: FALSE
# Adding GDP variable by deviding gdp on population
merged_data <- merged_data |> 
  mutate(
    GDP_pc_n3 = GDP / Population
  )
```

### 3. Descriptive analysis

```{r}
#| echo: FALSE
# Adding GDP variable by deviding gdp on population
merged_data <- merged_data |> 
  mutate(GDP_pc_n3 = (GDP / Population)*1000000)
```

Austria

```{r}
#| echo: FALSE
merged_data |> 
  filter(str_detect(geo, "AT")) |> 
  ggplot(mapping = aes(
  x = year, 
  y = GDP_pc_n3, 
  colour = geo,
)) + 
  geom_line() +
  labs(title = "Austria",
       x = "Year",
       y = "GDP per capita")
```

```{r}
#| echo: FALSE
# Generates descriptive statistics for variables in plot for AT
merged_data |> 
  filter(str_detect(geo, "AT")) |> 
  select(-1,-year) |> 
  summary()
```

Belgium

```{r}
#| echo: FALSE
merged_data |> 
  filter(str_detect(geo, "BE")) |> 
  ggplot(mapping = aes(
  x = year, 
  y = GDP_pc_n3, 
  colour = geo
)) + 
  geom_line() +
    labs(title = "Belgium",
       x = "Year",
       y = "GDP per capita")
```

```{r}
#| echo: FALSE
# Generates descriptive statistics for variables in plot for BE
merged_data |> 
  filter(str_detect(geo, "BE")) |> 
  select(-1,-year) |> 
  summary()
```

Bulgaria

```{r}
#| echo: FALSE
merged_data |> 
  filter(str_detect(geo, "BG")) |> 
  ggplot(mapping = aes(
  x = year, 
  y = GDP_pc_n3, 
  colour = geo
)) + 
  geom_line() +
    labs(title = "Bulgaria",
       x = "Year",
       y = "GDP per capita")
```

```{r}
#| echo: FALSE
# Generates descriptive statistics for variables in plot for BG
merged_data |> 
  filter(str_detect(geo, "BG")) |> 
  select(-1,-year) |> 
  summary()
```

Italy

North Italy

```{r}
#| echo: FALSE
# We are deviding italy into two parts, north and south
merged_data |>
  filter(str_detect(geo, "ITC|ITH")) |> 
  ggplot(mapping = aes(
  x = year, 
  y = GDP_pc_n3, 
  colour = geo
)) + 
  geom_line() +
    labs(title = "North Italy",
       x = "Year",
       y = "GDP per capita")
```

```{r}
#| echo: FALSE
# Generates descriptive statistics for variables in plot for North Italy
merged_data |> 
  filter(str_detect(geo, "ITCH|ITH")) |> 
  select(-1,-year) |> 
  summary()
```

South Italy

```{r}
#| echo: FALSE
merged_data |> 
  filter(str_detect(geo, "ITF|ITI|ITG")) |> 
  ggplot(mapping = aes(
  x = year, 
  y = GDP_pc_n3, 
  colour = geo
)) + 
  geom_line() +
    labs(title = "South Italy",
       x = "Year",
       y = "GDP per capita")
```

```{r}
#| echo: FALSE
# Generates descriptive statistics for variables in plot for Southern italy
merged_data |> 
  filter(str_detect(geo, "ITF|ITI|ITG")) |> 
  select(-1,-year) |> 
  summary()
```

Sweden

```{r}
#| echo: FALSE
merged_data |> 
  filter(str_detect(geo, "SE")) |> 
  ggplot(mapping = aes(
  x = year, 
  y = GDP_pc_n3, 
  colour = geo
)) + 
  geom_line() +
    labs(title = "Sweden",
       x = "Year",
       y = "GDP per capita")
```

```{r}
#| echo: FALSE
# Generates descriptive statistics for variables in plot for SE
merged_data |> 
  filter(str_detect(geo, "SE")) |> 
  select(-1,-year) |> 
  summary()
```

Sweden: We have an extreme value in the form of a significantly higher GDP per capita in sub region SE110 which is Stockholm.
This can be explained by the fact that it is the capital and it is natural that value creation is centralized around Stockholm.

The data shows that there is a fall in GDP per capita throughout Sweden in 2008.
The natural explanation for this would be the financial crisis in 2008.

The data also shows a reduction in 2019 - 2020 in many sub-regions that can be linked to covid 19.
The reason why not all sub-regions had this drop may be that large parts of Sweden did not comply with the restrictions linked to the infection of the virus.

Croatia - became a member in 2012

```{r}
#| echo: FALSE
merged_data |> 
  filter(str_detect(geo, "HR")) |> 
  ggplot(mapping = aes(
  x = year, 
  y = GDP_pc_n3, 
  colour = geo
)) + 
  geom_line() +
    labs(title = "Croatia",
       x = "Year",
       y = "GDP per capita")
```

```{r}
#| echo: FALSE
# Generates descriptive statistics for variables in plot for HR
merged_data |> 
  filter(str_detect(geo, "HR")) |> 
  select(-1,-year) |> 
  summary()
```

Serbia (EU candidate countries)

```{r}
#| echo: FALSE
merged_data |> 
  filter(str_detect(geo, "RS")) |> 
  ggplot(mapping = aes(
  x = year, 
  y = GDP_pc_n3, 
  colour = geo
)) + 
  geom_line() +
    labs(title = "Serbia",
       x = "Year",
       y = "GDP per capita")
```

```{r}
#| echo: FALSE
# Generates descriptive statistics for variables in plot for RS
merged_data |> 
  filter(str_detect(geo, "RS")) |> 
  select(-1,-year) |> 
  summary()
```

The reason why the dataset lacks GDP per capita in Serbia from 2000 - 2017 is explained by the fact that Serbia is an EU candidate and not part of the EU.
It is therefore partly unclear where we get data from 2017 - 2020, but can be explained by the fact that Serbia applied to join the EU in December 2009, and received the status of "EU candidate" in March 2012.
The reason why there is no data dating back to 2012 may have a connection with the fact that this is a war-torn country.

Bosnia and Herzegovia (EU candidate Countries)

The reason why Bosnia and Herzegovina lacks data from 2000 - 2020 in Eurostat is explained by the fact that they did not become an EU candidate until December 2022.

## Part B: Regional inequity

### 1. Literature review

### 2. Gini coefficient calculation

```{r}
#| echo: FALSE
# Calculating GINI in nuts3 data for nuts2 regions to measure inequity on a nuts2 scale
merged_data <- merged_data |> 
 mutate(
    nuts2 = substr(geo, 1,4),
    nuts0 = substr(geo, 1,2)
 )
```

```{r}
#| echo: FALSE
# Grouping NUTS3 to NUTS2
# Adding the gini coefficient to the gpd pr capita variable and weighing by population (grouped by nuts2)
merged_data <- merged_data |> 
  filter(!is.na(Population),
         Population != 0,
         GDP_pc_n3 != 0, 
         GDP_pc_n3 != "NA"
  ) |> 
group_by(nuts2, year) |> 
  mutate(gini_n2 = gini.wtd(GDP_pc_n3, Population)) |> 
  ungroup() |> 
  select(nuts0, nuts2, geo, year, GDP, Population, GDP_pc_n3, gini_n2)


```

### Data Presentation.

A

```{r, echo=FALSE}
#| fig.height = 15, fig.width = 12
# Added fig arguments in chunk in order to control the size of the facet wraps and colourgraded the gini coefficient intervals
merged_data |> 
  ggplot(mapping = aes(
    year, gini_n2, colour = gini_n2, group = nuts2
  )) +
  geom_line(alpha = 0.5) +
  geom_point(alpha = 1, size = 1, stroke = 1,) +
  scale_colour_gradient(low = "skyblue", high = "red") +
  facet_wrap(~ nuts0, ncol = 2, scales = "free", shrink = FALSE) +
               labs(title = "Visualization of the gini coefficient intervals in each country", size = 20) +
  theme(plot.title = element_text(size = 20)) 

   
```

```{r}
#| fig.height = 15, fig.width = 12
# Added fig arguments in chunk in order to control the size of the facet wraps and colourgraded the gini coefficient intervals
merged_data |> 
  ggplot(mapping = aes(
    year, gini_n2, colour = gini_n2
  )) +
  geom_line(alpha = 0.5) +
  scale_colour_gradient(low = "skyblue", high = "red") +
  facet_wrap(~ nuts0, ncol = 2, scales = "free", shrink = FALSE) +
               labs(title = "Visualization of the gini coefficient intervals in each country", size = 20) +
  theme(plot.title = element_text(size = 20)) 
```
